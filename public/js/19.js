(self.webpackChunksite=self.webpackChunksite||[]).push([[19],{7284:(e,n,a)=>{"use strict";a.d(n,{Z:()=>l});var t=a(4015),r=a.n(t),s=a(3645),i=a.n(s)()(r());i.push([e.id,"#formControlRange{direction:rtl}","",{version:3,sources:["webpack://./resources/js/components/MapContainerComponent.vue"],names:[],mappings:"AAyUA,kBACA,aACA",sourcesContent:['<template>\n  <div>\n    <map-component\n      v-if="map"\n      :map_id="map.uuid"\n      :map_token="map_token"\n      style="height: 65vh"\n      :users_can_create_markers="map.users_can_create_markers"\n      :map_categories="categories"\n      :initial_markers="activeMarkers"\n      v-on:marker-create="handleMarkerCreate"\n      v-on:marker-delete="handleMarkerDelete"\n      :user="user"\n    ></map-component>\n    <div v-else style="height: 65vh" class="row align-items-center bg-dark">\n      <div class="col text-center">\n        <div>Cartes.io</div>\n        <p class="text-muted mb-0">Contacting planet Earth...</p>\n      </div>\n    </div>\n    <div class="container">\n      <div class="row justify-content-center mt-5">\n        <div class="col-md-12" style="max-width: 950px">\n          <map-details-component\n            :map_id="map.uuid"\n            :map_token="map_token"\n            :map="map"\n            v-on:map-update="handleMapUpdate"\n          >\n            <map-markers-feed-component\n              v-if="hasLiveData"\n              :markers="activeMarkers"\n            ></map-markers-feed-component>\n            <div class="card bg-dark text-white mb-3">\n              <div\n                class="card-header"\n                data-toggle="collapse"\n                data-target="#displayCollapse"\n                aria-expanded="false"\n                aria-controls="displayCollapse"\n                style="cursor: pointer"\n              >\n                <i class="fa fa-sliders"></i> Map display options\n              </div>\n              <div class="card-body collapse" id="displayCollapse">\n                <div class="form-group row" v-if="!map_settings.show_all">\n                  <label class="col-md-12 col-form-label" for="formControlRange"\n                    >Time slider\n                    <small v-if="map_settings.mapSelectedAge > 0"\n                      >(showing map as of\n                      {{ map_settings.mapSelectedAge }} minutes ago)</small\n                    >\n                    <small v-else>(showing live map)</small>\n                  </label>\n                  <div class="col-md-12">\n                    <input\n                      type="range"\n                      class="form-control-range w-100"\n                      id="formControlRange"\n                      :max="mapAgeInMinutes"\n                      step="5"\n                      min="0"\n                      v-model="map_settings.mapSelectedAge"\n                    />\n                  </div>\n                </div>\n                <div class="form-group row">\n                  <label class="col-md-12 col-form-label"\n                    >Visible markers</label\n                  >\n                  <div class="col-md-12">\n                    <div class="form-check">\n                      <input\n                        type="checkbox"\n                        id="show_all_checkbox"\n                        v-model="map_settings.show_all"\n                      />\n                      <label class="form-check-label" for="show_all_checkbox">\n                        Show all markers\n                      </label>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n            \x3c!--                         <api-data-transformer-component v-on:markers-updated="handleApiMarkers"></api-data-transformer-component>\n --\x3e\n          </map-details-component>\n          <h2 class="mt-5" v-if="nonSpamMarkers && nonSpamMarkers.length > 0">\n            Map stats\n          </h2>\n          <div class="row" v-if="nonSpamMarkers && nonSpamMarkers.length > 0">\n            <div class="col-md-6">\n              <h3>Total markers</h3>\n              <div class="jumbotron jumbotron-fluid bg-dark rounded">\n                <div class="container">\n                  <div class="display-4 text-center">\n                    {{ nonSpamMarkers.length }}\n                  </div>\n                  <p class="lead text-center">All the markers created.</p>\n                </div>\n              </div>\n            </div>\n            <div class="col-md-6">\n              <h3>Active markers</h3>\n              <div class="jumbotron jumbotron-fluid bg-dark rounded">\n                <div class="container">\n                  <div class="display-4 text-center">\n                    {{ nonSpamMarkers.length - expiredMarkers.length }}\n                  </div>\n                  <p class="lead text-center">\n                    Markers that are currently live.\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n          <map-markers-chart-component\n            v-if="nonSpamMarkers && nonSpamMarkers.length > 0"\n            :markers="markers"\n          ></map-markers-chart-component>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n<script lang="ts">\nimport axios from "axios";\nexport default {\n  // props: [\'initial_map\', \'initial_markers\', \'initial_map_token\', \'user\'],\n\n  props: {\n    // Basic type check (`null` and `undefined` values will pass any type validation)\n    initial_map: Object,\n    // Multiple possible types\n    initial_markers: Object,\n    // Required string\n    initial_map_token: {\n      type: String,\n      required: false,\n    },\n    // Object with a default value\n    user: {\n      type: Object,\n      // Object or array defaults must be returned from\n      // a factory function\n      default: function () {\n        return {};\n      },\n    },\n  },\n\n  components: {},\n\n  data() {\n    return {\n      map: this.initial_map,\n      map_token: this.initial_map_token,\n      markers: this.initial_markers,\n      map_settings: {\n        show_all: false,\n        mapSelectedAge: 0,\n      },\n    };\n  },\n\n  created() {\n    if (!this.markers) {\n      this.getAllMarkers();\n    }\n    this.listenForNewMarkers();\n    this.listenForDeletedMarkers();\n  },\n\n  mounted() {},\n\n  computed: {\n    mapAgeInMinutes() {\n      if (!this.map) {\n        return false;\n      }\n      return Math.abs(Vue.moment().diff(this.map.created_at, "minutes"));\n    },\n    nonSpamMarkers() {\n      if (!this.markers) {\n        return [];\n      }\n      return this.markers.filter(function (marker) {\n        if (marker.is_spam && !localStorage["post_" + marker.id]) {\n          return false;\n        }\n        return true;\n      });\n    },\n    activeMarkers() {\n      if (!this.markers) {\n        return [];\n      } else if (this.map_settings.show_all) {\n        return this.nonSpamMarkers;\n      }\n\n      let diff_date_time = Vue.moment().subtract(\n        this.map_settings.mapSelectedAge,\n        "minutes"\n      );\n\n      return this.nonSpamMarkers.filter(function (marker) {\n        if (\n          Vue.moment(marker.created_at).isSameOrBefore(\n            diff_date_time,\n            "minute"\n          ) &&\n          (marker.expires_at == null ||\n            Vue.moment(diff_date_time).isBefore(marker.expires_at))\n        ) {\n          return true;\n        }\n        return false;\n      });\n    },\n    expiredMarkers() {\n      if (!this.nonSpamMarkers) {\n        return [];\n      }\n      return this.nonSpamMarkers.filter(function (marker) {\n        if (!marker.expires_at) {\n          return false;\n        }\n        return Vue.moment().isAfter(Vue.moment(marker.expires_at));\n        //return new Date() > new Date(Date.parse(marker.expires_at.replace(/-/g, \'/\')))\n      });\n    },\n    hasLiveData() {\n      if (!this.map) {\n        return false;\n      }\n      if (this.map.users_can_create_markers === "no") {\n        return false;\n      }\n      if (this.markers < 1) {\n        return false;\n      }\n      return true;\n    },\n    categories() {\n      if (!this.markers) {\n        return [];\n      }\n      var map1 = this.markers.map((x) => x.category);\n      return (\n        map1\n          .map((e) => e.id)\n          // store the indexes of the unique objects\n          .map((e, i, final) => final.indexOf(e) === i && i)\n          // eliminate the false indexes & return unique objects\n          .filter((e) => map1[e])\n          .map((e) => map1[e])\n      );\n    },\n  },\n\n  watch: {},\n\n  methods: {\n    groupBy(list, keyGetter) {\n      const map = new Map();\n      list.forEach((item) => {\n        const key = keyGetter(item);\n        const collection = map.get(key);\n        if (!collection) {\n          map.set(key, [item]);\n        } else {\n          collection.push(item);\n        }\n      });\n      return map;\n    },\n\n    getAllMarkers() {\n      axios\n        .get("/api/maps/" + this.map.uuid + "/markers?show_expired=true")\n        .then((response) => (this.markers = response.data));\n    },\n\n    listenForNewMarkers() {\n      Echo.channel("maps." + this.map.uuid).listen("MarkerCreated", (e) => {\n        // this.$notify("A new marker was just added")\n        this.$notify({\n          type: "success",\n          title: \'"\' + e.marker.category.name + \'" marker was just added\',\n          text: e.marker.description,\n        });\n        this.handleMarkerCreate(e.marker);\n      });\n    },\n\n    listenForDeletedMarkers() {\n      Echo.channel("maps." + this.map.uuid).listen("MarkerDeleted", (e) => {\n        this.handleMarkerDelete(e.marker.id);\n      });\n    },\n\n    handleMarkerCreate(marker) {\n      this.markers.push(marker);\n    },\n\n    handleMarkerDelete(id) {\n      this.$notify("A marker was just deleted");\n      this.markers = this.markers.filter((e) => e.id !== id);\n    },\n\n    handleMapUpdate(map) {\n      this.$notify("Information about this map has been updated");\n      this.map = map;\n    },\n\n    handleApiMarkers(markers) {\n      this.markers = markers;\n    },\n    markerInLocalStorageKey(id) {\n      if (localStorage["post_" + id]) {\n        return true;\n      }\n      return false;\n    },\n  },\n};\n<\/script>\n<style>\n#formControlRange {\n  direction: rtl;\n}\n</style>\n'],sourceRoot:""}]);const l=i},9019:(e,n,a)=>{"use strict";a.r(n),a.d(n,{default:()=>c});var t=a(9669),r=a.n(t);const s={props:{initial_map:Object,initial_markers:Object,initial_map_token:{type:String,required:!1},user:{type:Object,default:function(){return{}}}},components:{},data:function(){return{map:this.initial_map,map_token:this.initial_map_token,markers:this.initial_markers,map_settings:{show_all:!1,mapSelectedAge:0}}},created:function(){this.markers||this.getAllMarkers(),this.listenForNewMarkers(),this.listenForDeletedMarkers()},mounted:function(){},computed:{mapAgeInMinutes:function(){return!!this.map&&Math.abs(Vue.moment().diff(this.map.created_at,"minutes"))},nonSpamMarkers:function(){return this.markers?this.markers.filter((function(e){return!(e.is_spam&&!localStorage["post_"+e.id])})):[]},activeMarkers:function(){if(!this.markers)return[];if(this.map_settings.show_all)return this.nonSpamMarkers;var e=Vue.moment().subtract(this.map_settings.mapSelectedAge,"minutes");return this.nonSpamMarkers.filter((function(n){return!(!Vue.moment(n.created_at).isSameOrBefore(e,"minute")||null!=n.expires_at&&!Vue.moment(e).isBefore(n.expires_at))}))},expiredMarkers:function(){return this.nonSpamMarkers?this.nonSpamMarkers.filter((function(e){return!!e.expires_at&&Vue.moment().isAfter(Vue.moment(e.expires_at))})):[]},hasLiveData:function(){return!!this.map&&("no"!==this.map.users_can_create_markers&&!(this.markers<1))},categories:function(){if(!this.markers)return[];var e=this.markers.map((function(e){return e.category}));return e.map((function(e){return e.id})).map((function(e,n,a){return a.indexOf(e)===n&&n})).filter((function(n){return e[n]})).map((function(n){return e[n]}))}},watch:{},methods:{groupBy:function(e,n){var a=new Map;return e.forEach((function(e){var t=n(e),r=a.get(t);r?r.push(e):a.set(t,[e])})),a},getAllMarkers:function(){var e=this;r().get("/api/maps/"+this.map.uuid+"/markers?show_expired=true").then((function(n){return e.markers=n.data}))},listenForNewMarkers:function(){var e=this;Echo.channel("maps."+this.map.uuid).listen("MarkerCreated",(function(n){e.$notify({type:"success",title:'"'+n.marker.category.name+'" marker was just added',text:n.marker.description}),e.handleMarkerCreate(n.marker)}))},listenForDeletedMarkers:function(){var e=this;Echo.channel("maps."+this.map.uuid).listen("MarkerDeleted",(function(n){e.handleMarkerDelete(n.marker.id)}))},handleMarkerCreate:function(e){this.markers.push(e)},handleMarkerDelete:function(e){this.$notify("A marker was just deleted"),this.markers=this.markers.filter((function(n){return n.id!==e}))},handleMapUpdate:function(e){this.$notify("Information about this map has been updated"),this.map=e},handleApiMarkers:function(e){this.markers=e},markerInLocalStorageKey:function(e){return!!localStorage["post_"+e]}}};var i=a(3379),l=a.n(i),o=a(7284),m={insert:"head",singleton:!1};l()(o.Z,m);o.Z.locals;const c=(0,a(1900).Z)(s,(function(){var e=this,n=e.$createElement,a=e._self._c||n;return a("div",[e.map?a("map-component",{staticStyle:{height:"65vh"},attrs:{map_id:e.map.uuid,map_token:e.map_token,users_can_create_markers:e.map.users_can_create_markers,map_categories:e.categories,initial_markers:e.activeMarkers,user:e.user},on:{"marker-create":e.handleMarkerCreate,"marker-delete":e.handleMarkerDelete}}):a("div",{staticClass:"row align-items-center bg-dark",staticStyle:{height:"65vh"}},[a("div",{staticClass:"col text-center"},[a("div",[e._v("Cartes.io")]),e._v(" "),a("p",{staticClass:"text-muted mb-0"},[e._v("Contacting planet Earth...")])])]),e._v(" "),a("div",{staticClass:"container"},[a("div",{staticClass:"row justify-content-center mt-5"},[a("div",{staticClass:"col-md-12",staticStyle:{"max-width":"950px"}},[a("map-details-component",{attrs:{map_id:e.map.uuid,map_token:e.map_token,map:e.map},on:{"map-update":e.handleMapUpdate}},[e.hasLiveData?a("map-markers-feed-component",{attrs:{markers:e.activeMarkers}}):e._e(),e._v(" "),a("div",{staticClass:"card bg-dark text-white mb-3"},[a("div",{staticClass:"card-header",staticStyle:{cursor:"pointer"},attrs:{"data-toggle":"collapse","data-target":"#displayCollapse","aria-expanded":"false","aria-controls":"displayCollapse"}},[a("i",{staticClass:"fa fa-sliders"}),e._v(" Map display options\n             ")]),e._v(" "),a("div",{staticClass:"card-body collapse",attrs:{id:"displayCollapse"}},[e.map_settings.show_all?e._e():a("div",{staticClass:"form-group row"},[a("label",{staticClass:"col-md-12 col-form-label",attrs:{for:"formControlRange"}},[e._v("Time slider\n                   "),e.map_settings.mapSelectedAge>0?a("small",[e._v("(showing map as of\n                     "+e._s(e.map_settings.mapSelectedAge)+" minutes ago)")]):a("small",[e._v("(showing live map)")])]),e._v(" "),a("div",{staticClass:"col-md-12"},[a("input",{directives:[{name:"model",rawName:"v-model",value:e.map_settings.mapSelectedAge,expression:"map_settings.mapSelectedAge"}],staticClass:"form-control-range w-100",attrs:{type:"range",id:"formControlRange",max:e.mapAgeInMinutes,step:"5",min:"0"},domProps:{value:e.map_settings.mapSelectedAge},on:{__r:function(n){return e.$set(e.map_settings,"mapSelectedAge",n.target.value)}}})])]),e._v(" "),a("div",{staticClass:"form-group row"},[a("label",{staticClass:"col-md-12 col-form-label"},[e._v("Visible markers")]),e._v(" "),a("div",{staticClass:"col-md-12"},[a("div",{staticClass:"form-check"},[a("input",{directives:[{name:"model",rawName:"v-model",value:e.map_settings.show_all,expression:"map_settings.show_all"}],attrs:{type:"checkbox",id:"show_all_checkbox"},domProps:{checked:Array.isArray(e.map_settings.show_all)?e._i(e.map_settings.show_all,null)>-1:e.map_settings.show_all},on:{change:function(n){var a=e.map_settings.show_all,t=n.target,r=!!t.checked;if(Array.isArray(a)){var s=e._i(a,null);t.checked?s<0&&e.$set(e.map_settings,"show_all",a.concat([null])):s>-1&&e.$set(e.map_settings,"show_all",a.slice(0,s).concat(a.slice(s+1)))}else e.$set(e.map_settings,"show_all",r)}}}),e._v(" "),a("label",{staticClass:"form-check-label",attrs:{for:"show_all_checkbox"}},[e._v("\n                       Show all markers\n                     ")])])])])])])],1),e._v(" "),e.nonSpamMarkers&&e.nonSpamMarkers.length>0?a("h2",{staticClass:"mt-5"},[e._v("\n           Map stats\n         ")]):e._e(),e._v(" "),e.nonSpamMarkers&&e.nonSpamMarkers.length>0?a("div",{staticClass:"row"},[a("div",{staticClass:"col-md-6"},[a("h3",[e._v("Total markers")]),e._v(" "),a("div",{staticClass:"jumbotron jumbotron-fluid bg-dark rounded"},[a("div",{staticClass:"container"},[a("div",{staticClass:"display-4 text-center"},[e._v("\n                   "+e._s(e.nonSpamMarkers.length)+"\n                 ")]),e._v(" "),a("p",{staticClass:"lead text-center"},[e._v("All the markers created.")])])])]),e._v(" "),a("div",{staticClass:"col-md-6"},[a("h3",[e._v("Active markers")]),e._v(" "),a("div",{staticClass:"jumbotron jumbotron-fluid bg-dark rounded"},[a("div",{staticClass:"container"},[a("div",{staticClass:"display-4 text-center"},[e._v("\n                   "+e._s(e.nonSpamMarkers.length-e.expiredMarkers.length)+"\n                 ")]),e._v(" "),a("p",{staticClass:"lead text-center"},[e._v("\n                   Markers that are currently live.\n                 ")])])])])]):e._e(),e._v(" "),e.nonSpamMarkers&&e.nonSpamMarkers.length>0?a("map-markers-chart-component",{attrs:{markers:e.markers}}):e._e()],1)])])],1)}),[],!1,null,null,null).exports}}]);
//# sourceMappingURL=19.js.map